# Copyright(C) 2006 System Level Solutions

CLASS sls_tristate_sram_16_bit_10_ns
{
      ASSOCIATED_FILES 
      {
         Add_Program = "default";
         Edit_Program = "default";
         Generator_Program = "mk_sram.pl";
      }
      MODULE_DEFAULTS 
      {
         class = "sls_tristate_sram_16_bit_10_ns";
         class_version = "2.0";
         iss_model_name = "altera_memory";
         HDL_INFO 
         {
# An interface to this memory requires no additional files
# in the target project directory.
         }
         WIZARD_SCRIPT_ARGUMENTS 
         {
            sram_memory_size = "128";
            sram_memory_units = "1024";
            sram_data_width = "16";
         }
         SLAVE s1
         {
            PORT_WIRING 
            {
               PORT data
               {
                  width = "16";
                  is_shared = "1";
                  direction = "inout";
                  type = "data";
               }
               PORT address
               {
                  width = "16";
                  is_shared = "1";
                  direction = "input";
                  type = "address";
               }
               PORT read_n
               {
                  width = "1";
                  is_shared = "0";
                  direction = "input";
                  type = "read_n";
               }
               PORT write_n
               {
                  width = "1";
                  is_shared = "0";
                  direction = "input";
                  type = "write_n";
               }
               PORT be_n
               {
                  width = "2";
                  is_shared = "1";
                  direction = "input";
                  type = "byteenable_n";
               }
               PORT select_n
               {
                  width = "1";
                  is_shared = "0";
                  direction = "input";
                  type = "chipselect_n";
               }
            }
            SYSTEM_BUILDER_INFO 
            {
               Bus_Type = "avalon_tristate";
               Is_Memory_Device = "1";
               Address_Alignment = "dynamic";
               Data_Width = "16";
               Address_Width = "16";
               Has_IRQ = "0";
               IRQ_Number = "N/A";
               Read_Wait_States = "0";
              # "5";
              # "peripheral_controlled";               
               Write_Wait_States = "0";
              # "5";
              # "peripheral_controlled";               
               Hold_Time = "half_clock";
               Base_Address = "--unknown--";
               Address_Span = "131072";
            }
         }
         SYSTEM_BUILDER_INFO 
         {
            Is_Enabled = "1";
            Instantiate_In_System_Module = "0";
            Make_Memory_Model = "1";
            Default_Module_Name = "sram";
            Top_Level_Ports_Are_Enumerated = "1";
         }
      }
      USER_INTERFACE 
      {
         USER_LABELS 
         {
            name = "IS61LV6416L-10T SRAM (16-Bit) -- SLS";
            technology = "Memory";
            license = "full";
            #alias = "sram256";
         }
         LINKS
         {
            LINK UP3_1C6_Schematics
            {
               title="Schematics for UP3-1C6 Education Kit";
               url="http://www.slscorp.com/UP3Support/tutorials/UP3_1C6_REV2_Schematic.pdf";
            }
            LINK UP3_1C6_Manual
            {
               title="Manual for UP3-1C6 Education Kit";
               url="http://www.slscorp.com/UP3Support/tutorials/UP3-1C6%20Manual.pdf";
            }
            LINK UP3_1C12_Schematics
            {
               title="Schematics for UP3-1C12 Education Kit";
               url="http://www.slscorp.com/UP3Support/tutorials/UP3_1C12_Schematic.pdf";
            }
            LINK UP3_1C12_Manual
            {
               title="Manual for UP3-1C12 Education Kit";
               url="http://www.slscorp.com/UP3Support/tutorials/UP3-1C12%20Manual.pdf";
            }
         }
         WIZARD_UI default
         {
            DEBUG{}
	    title = "SRAM (IS61LV6416L-10T chip) - {{ $MOD }}";
            CONTEXT 
            {
               WSA = "WIZARD_SCRIPT_ARGUMENTS";
               CONTENTS = "WIZARD_SCRIPT_ARGUMENTS/CONTENTS srec";
               SBI = "SLAVE s1/SYSTEM_BUILDER_INFO";
               MODULE_SBI = "SYSTEM_BUILDER_INFO";
              # SPWA  = "SLAVE s1/PORT_WIRING/PORT address";
              # SPWD  = "SLAVE s1/PORT_WIRING/PORT data";
              # SPWBE = "SLAVE s1/PORT_WIRING/PORT be_n";
            }
# These assignments manage the continuous updating of values
# via the WSA, and some intermediate values.
            $$var_byte_count = "{{ $WSA/sram_memory_size * $WSA/sram_memory_units }}"; # aka address span
            $$var_word_count = "{{ $$var_byte_count * 8 / $WSA/sram_data_width }}";
            $$var_address_bits = "{{ ceil(log2($$var_word_count)) }}"; # 
# And now, poke in all those results to the right PTF spots
            $SBI/Address_Width = "{{ $$var_address_bits }}";
            $SBI/Address_Span = "{{ $$var_byte_count }}";
            $SBI/Data_Width = "{{ $WSA/sram_data_width }}";
           # $SPWA/width = "{{ $$var_address_bits }}";
           # $SPWD/width = "{{ $WSA/sram_data_width }}";
           # $SPWBE/width = "{{ $WSA/sram_data_width / 8 }}";

            ACTION wizard_finish
            {
               $MOD/SLAVE s1/PORT_WIRING/PORT address/width = "{{ $SBI/Address_Width }}";
               $MOD/SLAVE s1/PORT_WIRING/PORT data/width = "{{ $SBI/Data_Width }}";
               $MOD/SLAVE s1/PORT_WIRING/PORT be_n/width = "{{ $SBI/Data_Width / 8 }}";
            }

        align = "left";
        PAGES main
        {
          select = 1;
#          align = "left";
          PAGE 1
          {
            title = "Attributes";
            GROUP 
            {
               align = "left";
               title = "Static RAM";
               spacing = 12;
               TEXT 
               {
                  title = 
                  "The ESDK (Embedded Systems Development Kit) Rev2 a.k.a.<br>
                   UP3 Education Kit (Cyclone EP1C6, Cyclone EP1C12 editions)<br>
                   has one IS61LV6416L-10T SRAM chip arranged as<br>
                   64k 16-bit words (128KByte total address span).<br>
                   <br>
                   This is a 10 ns 16-bit SRAM component, which can also be <br>
                   customized for Address span for other 16-bit 10 ns SRAMs.<br>";
               }

               GROUP 
               {
                  TEXT 
                  {
                     title = "Memory Size: ";
                  }
                  layout = "horizontal";
                  EDIT 
                  {
                     justify = "right";
                     DATA 
                     {
                        $WSA/sram_memory_size = "$";
                     }
                  }
                  COMBO 
                  {
                     DATA 
                     {
                        $WSA/sram_memory_units = "$";
                     }
                     ITEM 
                     {
                        title = "Bytes";
                        value = "1";
                     }
                     ITEM 
                     {
                        title = "kB";
                        value = "1024";
                     }
                  }
               }
               TEXT 
               {
                  title = "{{ $$var_address_bits }} Word Aligned Address Bits";
               }
            }
            GROUP simulation_model
            {
               title = "Generic Memory Model (Simulation Only)";
               align = "left";
               spacing = "0";
               CHECK
               {
                  title = 
                     "Include a functional memory model in the system testbench.";
                  tooltip =
                     "The model will auto-size to the declared SRAM profile.<br>When not selected, you must acquire a vendor memory model<br>and manually wire it into the testbench.";
                  DATA
                  {
                     $MODULE_SBI/Make_Memory_Model = $;
                  }
               }
            }

          }

        }
      }
   }
}
